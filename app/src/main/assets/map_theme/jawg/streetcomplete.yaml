global:
    geometry_area_color: '#22D14000' # accent color + alpha
    geometry_line_color: '#44D14000'
    geometry_point_color: '#88D14000'
    track_color: '#44536dfe'
    track_color_record: '#44fe1616'
    old_track_color: '#22536dfe'

textures:
    pins:
        url: ''
        filtering: mipmap
        sprites: {}
    pin_dot:
        url: images/pin_dot@2x.png
        filtering: mipmap
        density: 5

styles:
    pin-selection:
        base: points
        blend: overlay
        blend_order: 4
    selected-pin-icons:
        base: points
        texture: pins
        blend: overlay
        blend_order: 3
    pin-icons:
        base: points
        texture: pins
        blend: overlay
        blend_order: 2
    pin-dots:
        base: points
        texture: pin_dot
        blend: overlay
        blend_order: 1
    geometry-lines:
        base: lines
        blend: overlay
    geometry-polygons:
        base: polygons
        blend: overlay
    geometry-points:
        base: points
        blend: overlay
        blend_order: 2
    track-lines:
        base: lines
        blend: overlay
    map_data-lines:
        base: lines
        blend: translucent
    map_data-polygons:
        base: polygons
        blend: translucent
    map_data-points:
        base: points
        blend: translucent
        blend_order: 1
    map_data-lines-right:
        base: lines
        blend: inlay
        texcoords: true
        shaders:
            blocks:
                color: |
                    color.a = color.a * smoothstep(0.49, 0.51, (v_texcoord.x - 0.5) * 2.0);
    map_data-lines-left:
        base: lines
        blend: inlay
        texcoords: true
        shaders:
            blocks:
                color: |
                    color.a = color.a * smoothstep(-0.49, -0.51, (v_texcoord.x - 0.5) * 2.0);

layers:
    streetcomplete_selected_pins:
        data: { source: streetcomplete_selected_pins }
        draw:
            selected-pin-icons:
                size: 66px
                sprite: function() { return feature.kind }
                sprite_default: quest
                collide: false
                offset: [-8px, -33px]
    streetcomplete_pins:
        data: { source: streetcomplete_pins }
        pins:
            filter: { $zoom: { min: 16 } }
            draw:
                pin-icons:
                    interactive: true
                    priority: function() { return 1.0 - feature.importance / 100000.0 }
                    order: function() { return 100000 + feature.importance }
                    repeat_group: pin
                    size: 66px
                    sprite: function() { return feature.kind }
                    sprite_default: quest
                    offset: [-8px, -33px]
        dots_no_collide:
            filter: { $zoom: { min: 16 } }
            draw:
                pin-dots:
                    priority: 1
                    order: 1
                    size: 16px
                    collide: false
                    offset: [-1.5px, -12px]
        dots:
            filter: { $zoom: { min: 14, max: 15.999 } }
            draw:
                pin-dots:
                    priority: 1
                    order: 1
                    repeat_group: pin_dot
                    size: 16px
                    collide: true
                    offset: [-1.5px, -12px]
    streetcomplete_geometry:
        data: { source: streetcomplete_geometry }
        line:
            filter: { type: [poly, line] }
            draw:
                geometry-lines:
                    color: global.geometry_line_color
                    width: 9px
                    collide: false
                    order: 1000
                    cap: round
                    join: round
        poly:
            filter: { type: poly }
            draw:
                geometry-polygons:
                    color: global.geometry_area_color
                    collide: false
                    order: 1000
                    cap: round
                    join: round
        point:
            filter: { type: point }
            draw:
                geometry-points:
                    color: global.geometry_point_color
                    size: 24px
                    collide: false
                    order: 1000
    # streetcomplete_track and streetcomplete_track2 layers are exactly the same except the source.
    #  It is not possible in tangram to define a layer for several sources.
    streetcomplete_track:
        data: { source: streetcomplete_track }
        current:
            filter: { old: [false] }
            draw:
                track-lines:
                    color: |
                        function() { return feature.record ? global.track_color_record : global.track_color }
                    width: [[14, 6px],[18, 12px]]
                    collide: false
                    join: round
                    order: 900
        old:
            filter: { old: [true] }
            draw:
                track-lines:
                    color: global.old_track_color
                    width: [[14, 6px],[18, 12px]]
                    collide: false
                    join: round
                    order: 900
    streetcomplete_track2:
        data: { source: streetcomplete_track2 }
        current:
            filter: { old: [false] }
            draw:
                track-lines:
                    color: |
                        function() { return feature.record ? global.track_color_record : global.track_color }
                    width: [[14, 6px],[18, 12px]]
                    collide: false
                    join: round
                    order: 900
        old:
            filter: { old: [true] }
            draw:
                track-lines:
                    color: global.old_track_color
                    width: [[14, 6px],[18, 12px]]
                    collide: false
                    join: round
                    order: 900
    streetcomplete_map_data:
        data: { source: streetcomplete_map_data }
        line:
            filter: { type: [line], color: true }
            draw:
                map_data-lines:
                    interactive: true
                    color: function() { return feature.color; }
                    width: function() { return feature.width; }
                    order: function() { return 851 + Number(feature.layer); }
                    cap: round
                    join: round
                    outline:
                        color: function() { return feature.strokeColor; }
                        width: 1m
                        order: function() { return 850 + Number(feature.layer); }
        line-left:
            filter: { type: [line], colorLeft: true }
            draw:
                map_data-lines-left:
                    interactive: true
                    color: function() { return feature.colorLeft; }
                    width: function() { return feature.width * 2.0 + 4.0; }
                    order: function() { return 852 + Number(feature.layer); }
                    join: round
        line-right:
            filter: { type: [line], colorRight: true }
            draw:
                map_data-lines-right:
                    interactive: true
                    color: function() { return feature.colorRight; }
                    width: function() { return feature.width * 2.0 + 4.0; }
                    order: function() { return 852 + Number(feature.layer); }
                    join: round
        area:
            filter: { type: [poly] }
            draw:
                map_data-polygons:
                    interactive: true
                    color: function() { return feature.color; }
                    order: 800
                    extrude: function() { return feature.height; }
                map_data-lines:
                    color: function() { return feature.strokeColor; }
                    order: 801
                    extrude: function() { return feature.height; }
                    width: 1m
                    cap: round
                    join: round
        label:
            filter: { text: true }
            draw:
                text:
                    interactive: true
                    text_source: text
                    priority: 10
                    font:
                        family: global.text_font_family
                        fill: global.text_fill_color
                        size: global.text_size
                        stroke: global.text_stroke
